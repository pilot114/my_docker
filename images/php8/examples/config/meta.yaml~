extensions:
    Core:
        funcs:
            zend_version:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            func_num_args:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            func_get_arg:
                params:
                    position: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            func_get_args:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            strlen:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            strcmp:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            strncmp:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            strcasecmp:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            strncasecmp:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            error_reporting:
                params:
                    error_level: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            define:
                params:
                    constant_name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    value: { isVariadic: false, byReference: false }
                    case_insensitive: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            defined:
                params:
                    constant_name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            get_class:
                params:
                    object: { types: [object], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            get_called_class:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            get_parent_class:
                params:
                    object_or_class: { types: [object, string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            is_subclass_of:
                params:
                    object_or_class: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    allow_string: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_a:
                params:
                    object_or_class: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    allow_string: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            get_class_vars:
                params:
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            get_object_vars:
                params:
                    object: { types: [object], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            get_mangled_object_vars:
                params:
                    object: { types: [object], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            get_class_methods:
                params:
                    object_or_class: { types: [object, string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            method_exists:
                params:
                    object_or_class: { isVariadic: false, byReference: false }
                    method: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            property_exists:
                params:
                    object_or_class: { isVariadic: false, byReference: false }
                    property: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            class_exists:
                params:
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    autoload: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            interface_exists:
                params:
                    interface: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    autoload: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            trait_exists:
                params:
                    trait: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    autoload: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            function_exists:
                params:
                    function: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            class_alias:
                params:
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    alias: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    autoload: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            get_included_files:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            get_required_files:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            trigger_error:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    error_level: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            user_error:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    error_level: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            set_error_handler:
                params:
                    callback: { types: [callable], isNull: true, isVariadic: false, byReference: false }
                    error_levels: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, array, object]
                    isNull: true
            restore_error_handler:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            set_exception_handler:
                params:
                    callback: { types: [callable], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, array, object]
                    isNull: true
            restore_exception_handler:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            get_declared_classes:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            get_declared_traits:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            get_declared_interfaces:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            get_defined_functions:
                params:
                    exclude_disabled: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            get_defined_vars:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            get_resource_type:
                params:
                    resource: { isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            get_resource_id:
                params:
                    resource: { isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            get_resources:
                params:
                    type: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            get_loaded_extensions:
                params:
                    zend_extensions: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            get_defined_constants:
                params:
                    categorize: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            debug_backtrace:
                params:
                    options: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            debug_print_backtrace:
                params:
                    options: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            extension_loaded:
                params:
                    extension: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            get_extension_funcs:
                params:
                    extension: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            gc_mem_caches:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            gc_collect_cycles:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            gc_enabled:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            gc_enable:
                params: {  }
                return:
                    types: [void]
                    isNull: false
            gc_disable:
                params: {  }
                return:
                    types: [void]
                    isNull: false
            gc_status:
                params: {  }
                return:
                    types: [array]
                    isNull: false
    date:
        funcs:
            strtotime:
                params:
                    datetime: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    baseTimestamp: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            date:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    timestamp: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            idate:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    timestamp: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            gmdate:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    timestamp: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mktime:
                params:
                    hour: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    minute: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    second: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    month: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    day: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    year: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            gmmktime:
                params:
                    hour: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    minute: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    second: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    month: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    day: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    year: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            checkdate:
                params:
                    month: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    day: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    year: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            strftime:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    timestamp: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gmstrftime:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    timestamp: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            time:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            localtime:
                params:
                    timestamp: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    associative: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            getdate:
                params:
                    timestamp: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            date_create:
                params:
                    datetime: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    timezone: { types: [DateTimeZone], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [DateTime, bool]
                    isNull: false
            date_create_immutable:
                params:
                    datetime: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    timezone: { types: [DateTimeZone], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [DateTimeImmutable, bool]
                    isNull: false
            date_create_from_format:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    datetime: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    timezone: { types: [DateTimeZone], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [DateTime, bool]
                    isNull: false
            date_create_immutable_from_format:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    datetime: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    timezone: { types: [DateTimeZone], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [DateTimeImmutable, bool]
                    isNull: false
            date_parse:
                params:
                    datetime: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            date_parse_from_format:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    datetime: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            date_get_last_errors:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
            date_format:
                params:
                    object: { types: [DateTimeInterface], isNull: false, isVariadic: false, byReference: false }
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            date_modify:
                params:
                    object: { types: [DateTime], isNull: false, isVariadic: false, byReference: false }
                    modifier: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTime, bool]
                    isNull: false
            date_add:
                params:
                    object: { types: [DateTime], isNull: false, isVariadic: false, byReference: false }
                    interval: { types: [DateInterval], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTime]
                    isNull: false
            date_sub:
                params:
                    object: { types: [DateTime], isNull: false, isVariadic: false, byReference: false }
                    interval: { types: [DateInterval], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTime]
                    isNull: false
            date_timezone_get:
                params:
                    object: { types: [DateTimeInterface], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTimeZone, bool]
                    isNull: false
            date_timezone_set:
                params:
                    object: { types: [DateTime], isNull: false, isVariadic: false, byReference: false }
                    timezone: { types: [DateTimeZone], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTime]
                    isNull: false
            date_offset_get:
                params:
                    object: { types: [DateTimeInterface], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            date_diff:
                params:
                    baseObject: { types: [DateTimeInterface], isNull: false, isVariadic: false, byReference: false }
                    targetObject: { types: [DateTimeInterface], isNull: false, isVariadic: false, byReference: false }
                    absolute: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateInterval]
                    isNull: false
            date_time_set:
                params:
                    object: { types: [DateTime], isNull: false, isVariadic: false, byReference: false }
                    hour: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    minute: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    second: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    microsecond: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTime]
                    isNull: false
            date_date_set:
                params:
                    object: { types: [DateTime], isNull: false, isVariadic: false, byReference: false }
                    year: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    month: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    day: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTime]
                    isNull: false
            date_isodate_set:
                params:
                    object: { types: [DateTime], isNull: false, isVariadic: false, byReference: false }
                    year: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    week: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    dayOfWeek: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTime]
                    isNull: false
            date_timestamp_set:
                params:
                    object: { types: [DateTime], isNull: false, isVariadic: false, byReference: false }
                    timestamp: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTime]
                    isNull: false
            date_timestamp_get:
                params:
                    object: { types: [DateTimeInterface], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            timezone_open:
                params:
                    timezone: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateTimeZone, bool]
                    isNull: false
            timezone_name_get:
                params:
                    object: { types: [DateTimeZone], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            timezone_name_from_abbr:
                params:
                    abbr: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    utcOffset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    isDST: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            timezone_offset_get:
                params:
                    object: { types: [DateTimeZone], isNull: false, isVariadic: false, byReference: false }
                    datetime: { types: [DateTimeInterface], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            timezone_transitions_get:
                params:
                    object: { types: [DateTimeZone], isNull: false, isVariadic: false, byReference: false }
                    timestampBegin: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    timestampEnd: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            timezone_location_get:
                params:
                    object: { types: [DateTimeZone], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            timezone_identifiers_list:
                params:
                    timezoneGroup: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    countryCode: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            timezone_abbreviations_list:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            timezone_version_get:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            date_interval_create_from_date_string:
                params:
                    datetime: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DateInterval, bool]
                    isNull: false
            date_interval_format:
                params:
                    object: { types: [DateInterval], isNull: false, isVariadic: false, byReference: false }
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            date_default_timezone_set:
                params:
                    timezoneId: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            date_default_timezone_get:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            date_sunrise:
                params:
                    timestamp: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    returnFormat: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    latitude: { types: [float], isNull: true, isVariadic: false, byReference: false }
                    longitude: { types: [float], isNull: true, isVariadic: false, byReference: false }
                    zenith: { types: [float], isNull: true, isVariadic: false, byReference: false }
                    utcOffset: { types: [float], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, int, float, bool]
                    isNull: false
            date_sunset:
                params:
                    timestamp: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    returnFormat: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    latitude: { types: [float], isNull: true, isVariadic: false, byReference: false }
                    longitude: { types: [float], isNull: true, isVariadic: false, byReference: false }
                    zenith: { types: [float], isNull: true, isVariadic: false, byReference: false }
                    utcOffset: { types: [float], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, int, float, bool]
                    isNull: false
            date_sun_info:
                params:
                    timestamp: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    latitude: { types: [float], isNull: false, isVariadic: false, byReference: false }
                    longitude: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
    libxml:
        funcs:
            libxml_set_streams_context:
                params:
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            libxml_use_internal_errors:
                params:
                    use_errors: { types: [bool], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            libxml_get_last_error:
                params: {  }
                return:
                    types: [LibXMLError, bool]
                    isNull: false
            libxml_get_errors:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            libxml_clear_errors:
                params: {  }
                return:
                    types: [void]
                    isNull: false
            libxml_disable_entity_loader:
                params:
                    disable: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            libxml_set_external_entity_loader:
                params:
                    resolver_function: { types: [callable], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
    openssl:
        funcs:
            openssl_x509_export_to_file:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    no_text: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_x509_export:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    output: { isVariadic: false, byReference: true }
                    no_text: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_x509_fingerprint:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    digest_algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_x509_check_private_key:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_x509_verify:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    public_key: { isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            openssl_x509_parse:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    short_names: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            openssl_x509_checkpurpose:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    purpose: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    ca_info: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    untrusted_certificates_file: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            openssl_x509_read:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [OpenSSLCertificate, bool]
                    isNull: false
            openssl_x509_free:
                params:
                    certificate: { types: [OpenSSLCertificate], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            openssl_pkcs12_export_to_file:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: false }
                    passphrase: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_pkcs12_export:
                params:
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    output: { isVariadic: false, byReference: true }
                    private_key: { isVariadic: false, byReference: false }
                    passphrase: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_pkcs12_read:
                params:
                    pkcs12: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    certificates: { isVariadic: false, byReference: true }
                    passphrase: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_csr_export_to_file:
                params:
                    csr: { types: [OpenSSLCertificateSigningRequest, string], isNull: false, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    no_text: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_csr_export:
                params:
                    csr: { types: [OpenSSLCertificateSigningRequest, string], isNull: false, isVariadic: false, byReference: false }
                    output: { isVariadic: false, byReference: true }
                    no_text: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_csr_sign:
                params:
                    csr: { types: [OpenSSLCertificateSigningRequest, string], isNull: false, isVariadic: false, byReference: false }
                    ca_certificate: { types: [OpenSSLCertificate, string], isNull: true, isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: false }
                    days: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: true, isVariadic: false, byReference: false }
                    serial: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [OpenSSLCertificate, bool]
                    isNull: false
            openssl_csr_new:
                params:
                    distinguished_names: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: true }
                    options: { types: [array], isNull: true, isVariadic: false, byReference: false }
                    extra_attributes: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [OpenSSLCertificateSigningRequest, bool]
                    isNull: false
            openssl_csr_get_subject:
                params:
                    csr: { types: [OpenSSLCertificateSigningRequest, string], isNull: false, isVariadic: false, byReference: false }
                    short_names: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            openssl_csr_get_public_key:
                params:
                    csr: { types: [OpenSSLCertificateSigningRequest, string], isNull: false, isVariadic: false, byReference: false }
                    short_names: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [OpenSSLAsymmetricKey, bool]
                    isNull: false
            openssl_pkey_new:
                params:
                    options: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [OpenSSLAsymmetricKey, bool]
                    isNull: false
            openssl_pkey_export_to_file:
                params:
                    key: { isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    passphrase: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_pkey_export:
                params:
                    key: { isVariadic: false, byReference: false }
                    output: { isVariadic: false, byReference: true }
                    passphrase: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_pkey_get_public:
                params:
                    public_key: { isVariadic: false, byReference: false }
                return:
                    types: [OpenSSLAsymmetricKey, bool]
                    isNull: false
            openssl_get_publickey:
                params:
                    public_key: { isVariadic: false, byReference: false }
                return:
                    types: [OpenSSLAsymmetricKey, bool]
                    isNull: false
            openssl_pkey_free:
                params:
                    key: { types: [OpenSSLAsymmetricKey], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            openssl_free_key:
                params:
                    key: { types: [OpenSSLAsymmetricKey], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            openssl_pkey_get_private:
                params:
                    private_key: { isVariadic: false, byReference: false }
                    passphrase: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [OpenSSLAsymmetricKey, bool]
                    isNull: false
            openssl_get_privatekey:
                params:
                    private_key: { isVariadic: false, byReference: false }
                    passphrase: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [OpenSSLAsymmetricKey, bool]
                    isNull: false
            openssl_pkey_get_details:
                params:
                    key: { types: [OpenSSLAsymmetricKey], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            openssl_pbkdf2:
                params:
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    salt: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key_length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    iterations: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    digest_algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_pkcs7_verify:
                params:
                    input_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    signers_certificates_filename: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    ca_info: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    untrusted_certificates_filename: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            openssl_pkcs7_encrypt:
                params:
                    input_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    certificate: { isVariadic: false, byReference: false }
                    headers: { types: [array], isNull: true, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    cipher_algo: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_pkcs7_sign:
                params:
                    input_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: false }
                    headers: { types: [array], isNull: true, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    untrusted_certificates_filename: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_pkcs7_decrypt:
                params:
                    input_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    certificate: { isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_pkcs7_read:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    certificates: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            openssl_cms_verify:
                params:
                    input_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    certificates: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    ca_info: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    untrusted_certificates_filename: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    pk7: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    sigfile: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_cms_encrypt:
                params:
                    input_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    certificate: { isVariadic: false, byReference: false }
                    headers: { types: [array], isNull: true, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    cipher_algo: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_cms_sign:
                params:
                    input_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    certificate: { types: [OpenSSLCertificate, string], isNull: false, isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: false }
                    headers: { types: [array], isNull: true, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    untrusted_certificates_filename: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_cms_decrypt:
                params:
                    input_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    output_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    certificate: { isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: false }
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_cms_read:
                params:
                    input_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    certificates: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            openssl_private_encrypt:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encrypted_data: { isVariadic: false, byReference: true }
                    private_key: { isVariadic: false, byReference: false }
                    padding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_private_decrypt:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    decrypted_data: { isVariadic: false, byReference: true }
                    private_key: { isVariadic: false, byReference: false }
                    padding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_public_encrypt:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encrypted_data: { isVariadic: false, byReference: true }
                    public_key: { isVariadic: false, byReference: false }
                    padding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_public_decrypt:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    decrypted_data: { isVariadic: false, byReference: true }
                    public_key: { isVariadic: false, byReference: false }
                    padding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_error_string:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_sign:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    signature: { isVariadic: false, byReference: true }
                    private_key: { isVariadic: false, byReference: false }
                    algorithm: { types: [string, int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_verify:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    signature: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    public_key: { isVariadic: false, byReference: false }
                    algorithm: { types: [string, int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            openssl_seal:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    sealed_data: { isVariadic: false, byReference: true }
                    encrypted_keys: { isVariadic: false, byReference: true }
                    public_key: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    cipher_algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    iv: { isVariadic: false, byReference: true }
                return:
                    types: [int, bool]
                    isNull: false
            openssl_open:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    output: { isVariadic: false, byReference: true }
                    encrypted_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: false }
                    cipher_algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    iv: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_get_md_methods:
                params:
                    aliases: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            openssl_get_cipher_methods:
                params:
                    aliases: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            openssl_get_curve_names:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
            openssl_digest:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    digest_algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_encrypt:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    cipher_algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    passphrase: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    iv: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    tag: { isVariadic: false, byReference: true }
                    aad: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    tag_length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_decrypt:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    cipher_algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    passphrase: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    iv: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    tag: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    aad: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_cipher_iv_length:
                params:
                    cipher_algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            openssl_dh_compute_key:
                params:
                    public_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    private_key: { types: [OpenSSLAsymmetricKey], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_pkey_derive:
                params:
                    public_key: { isVariadic: false, byReference: false }
                    private_key: { isVariadic: false, byReference: false }
                    key_length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_random_pseudo_bytes:
                params:
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    strong_result: { isVariadic: false, byReference: true }
                return:
                    types: [string]
                    isNull: false
            openssl_spki_new:
                params:
                    private_key: { types: [OpenSSLAsymmetricKey], isNull: false, isVariadic: false, byReference: false }
                    challenge: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    digest_algo: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_spki_verify:
                params:
                    spki: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            openssl_spki_export:
                params:
                    spki: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_spki_export_challenge:
                params:
                    spki: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openssl_get_cert_locations:
                params: {  }
                return:
                    types: [array]
                    isNull: false
    pcre:
        funcs:
            preg_match:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    matches: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            preg_match_all:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    matches: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: true
            preg_replace:
                params:
                    pattern: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    replacement: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    count: { isVariadic: false, byReference: true }
                return:
                    types: [array, string]
                    isNull: true
            preg_filter:
                params:
                    pattern: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    replacement: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    count: { isVariadic: false, byReference: true }
                return:
                    types: [array, string]
                    isNull: true
            preg_replace_callback:
                params:
                    pattern: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    count: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string]
                    isNull: true
            preg_replace_callback_array:
                params:
                    pattern: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    count: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string]
                    isNull: true
            preg_split:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            preg_quote:
                params:
                    str: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    delimiter: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            preg_grep:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            preg_last_error:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            preg_last_error_msg:
                params: {  }
                return:
                    types: [string]
                    isNull: false
    zlib:
        funcs:
            ob_gzhandler:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            zlib_get_coding_type:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            gzfile:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    use_include_path: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            gzopen:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    use_include_path: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            readgzfile:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    use_include_path: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            zlib_encode:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    level: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            zlib_decode:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    max_length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gzdeflate:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    level: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gzencode:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    level: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gzcompress:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    level: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gzinflate:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    max_length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gzdecode:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    max_length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gzuncompress:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    max_length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gzwrite:
                params:
                    stream: { isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            gzputs:
                params:
                    stream: { isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            gzrewind:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            gzclose:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            gzeof:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            gzgetc:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gzpassthru:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            gzseek:
                params:
                    stream: { isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    whence: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            gztell:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            gzread:
                params:
                    stream: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gzgets:
                params:
                    stream: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            deflate_init:
                params:
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DeflateContext, bool]
                    isNull: false
            deflate_add:
                params:
                    context: { types: [DeflateContext], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flush_mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            inflate_init:
                params:
                    encoding: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [InflateContext, bool]
                    isNull: false
            inflate_add:
                params:
                    context: { types: [InflateContext], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flush_mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            inflate_get_status:
                params:
                    context: { types: [InflateContext], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            inflate_get_read_len:
                params:
                    context: { types: [InflateContext], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
    ctype:
        funcs:
            ctype_alnum:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_alpha:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_cntrl:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_digit:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_lower:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_graph:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_print:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_punct:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_space:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_upper:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ctype_xdigit:
                params:
                    text: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
    curl:
        funcs:
            curl_close:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            curl_copy_handle:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [CurlHandle, bool]
                    isNull: false
            curl_errno:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            curl_error:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            curl_escape:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            curl_unescape:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            curl_multi_setopt:
                params:
                    multi_handle: { types: [CurlMultiHandle], isNull: false, isVariadic: false, byReference: false }
                    option: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            curl_exec:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            curl_file_create:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mime_type: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    posted_filename: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [CURLFile]
                    isNull: false
            curl_getinfo:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                    option: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            curl_init:
                params:
                    url: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [CurlHandle, bool]
                    isNull: false
            curl_multi_add_handle:
                params:
                    multi_handle: { types: [CurlMultiHandle], isNull: false, isVariadic: false, byReference: false }
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            curl_multi_close:
                params:
                    multi_handle: { types: [CurlMultiHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            curl_multi_errno:
                params:
                    multi_handle: { types: [CurlMultiHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            curl_multi_exec:
                params:
                    multi_handle: { types: [CurlMultiHandle], isNull: false, isVariadic: false, byReference: false }
                    still_running: { isVariadic: false, byReference: true }
                return:
                    types: [int]
                    isNull: false
            curl_multi_getcontent:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: true
            curl_multi_info_read:
                params:
                    multi_handle: { types: [CurlMultiHandle], isNull: false, isVariadic: false, byReference: false }
                    queued_messages: { isVariadic: false, byReference: true }
                return:
                    types: [array, bool]
                    isNull: false
            curl_multi_init:
                params: {  }
                return:
                    types: [CurlMultiHandle]
                    isNull: false
            curl_multi_remove_handle:
                params:
                    multi_handle: { types: [CurlMultiHandle], isNull: false, isVariadic: false, byReference: false }
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            curl_multi_select:
                params:
                    multi_handle: { types: [CurlMultiHandle], isNull: false, isVariadic: false, byReference: false }
                    timeout: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            curl_multi_strerror:
                params:
                    error_code: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: true
            curl_pause:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            curl_reset:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            curl_setopt_array:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            curl_setopt:
                params:
                    handle: { types: [CurlHandle], isNull: false, isVariadic: false, byReference: false }
                    option: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            curl_share_close:
                params:
                    share_handle: { types: [CurlShareHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            curl_share_errno:
                params:
                    share_handle: { types: [CurlShareHandle], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            curl_share_init:
                params: {  }
                return:
                    types: [CurlShareHandle]
                    isNull: false
            curl_share_setopt:
                params:
                    share_handle: { types: [CurlShareHandle], isNull: false, isVariadic: false, byReference: false }
                    option: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            curl_share_strerror:
                params:
                    error_code: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: true
            curl_strerror:
                params:
                    error_code: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: true
            curl_version:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
    dom:
        funcs:
            dom_import_simplexml:
                params:
                    node: { types: [object], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [DOMElement]
                    isNull: false
    fileinfo:
        funcs:
            finfo_open:
                params:
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    magic_database: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            finfo_close:
                params:
                    finfo: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            finfo_set_flags:
                params:
                    finfo: { isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            finfo_file:
                params:
                    finfo: { isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            finfo_buffer:
                params:
                    finfo: { isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mime_content_type:
                params:
                    filename: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
    filter:
        funcs:
            filter_has_var:
                params:
                    input_type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    var_name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            filter_input:
                params:
                    type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    var_name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    filter: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array, int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            filter_var:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    filter: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array, int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            filter_input_array:
                params:
                    type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array, int], isNull: false, isVariadic: false, byReference: false }
                    add_empty: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: true
            filter_var_array:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array, int], isNull: false, isVariadic: false, byReference: false }
                    add_empty: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: true
            filter_list:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            filter_id:
                params:
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
    ftp:
        funcs:
            ftp_connect:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    port: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    timeout: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            ftp_ssl_connect:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    port: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    timeout: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            ftp_login:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    username: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_pwd:
                params:
                    ftp: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            ftp_cdup:
                params:
                    ftp: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_chdir:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_exec:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    command: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_raw:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    command: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            ftp_mkdir:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            ftp_rmdir:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_chmod:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    permissions: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            ftp_alloc:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    size: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    response: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            ftp_nlist:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            ftp_rawlist:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    recursive: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            ftp_mlsd:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            ftp_systype:
                params:
                    ftp: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            ftp_fget:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    stream: { isVariadic: false, byReference: false }
                    remote_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_nb_fget:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    stream: { isVariadic: false, byReference: false }
                    remote_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            ftp_pasv:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    enable: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_get:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    local_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    remote_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_nb_get:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    local_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    remote_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            ftp_nb_continue:
                params:
                    ftp: { isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            ftp_fput:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    remote_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    stream: { isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_nb_fput:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    remote_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    stream: { isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            ftp_put:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    remote_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    local_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_append:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    remote_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    local_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_nb_put:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    remote_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    local_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            ftp_size:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            ftp_mdtm:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            ftp_rename:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    from: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    to: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_delete:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_site:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    command: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_close:
                params:
                    ftp: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_quit:
                params:
                    ftp: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_set_option:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    option: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    value: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ftp_get_option:
                params:
                    ftp: { isVariadic: false, byReference: false }
                    option: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
    hash:
        funcs:
            hash:
                params:
                    algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            hash_file:
                params:
                    algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            hash_hmac:
                params:
                    algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            hash_hmac_file:
                params:
                    algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            hash_init:
                params:
                    algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [HashContext]
                    isNull: false
            hash_update:
                params:
                    context: { types: [HashContext], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            hash_update_stream:
                params:
                    context: { types: [HashContext], isNull: false, isVariadic: false, byReference: false }
                    stream: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            hash_update_file:
                params:
                    context: { types: [HashContext], isNull: false, isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    stream_context: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            hash_final:
                params:
                    context: { types: [HashContext], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            hash_copy:
                params:
                    context: { types: [HashContext], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [HashContext]
                    isNull: false
            hash_algos:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            hash_hmac_algos:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            hash_pbkdf2:
                params:
                    algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    salt: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    iterations: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            hash_equals:
                params:
                    known_string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    user_string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            hash_hkdf:
                params:
                    algo: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    info: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    salt: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mhash_get_block_size:
                params:
                    algo: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            mhash_get_hash_name:
                params:
                    algo: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mhash_keygen_s2k:
                params:
                    algo: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    salt: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mhash_count:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            mhash:
                params:
                    algo: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
    iconv:
        funcs:
            iconv_strlen:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            iconv_substr:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            iconv_strpos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            iconv_strrpos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            iconv_mime_encode:
                params:
                    field_name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    field_value: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            iconv_mime_decode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            iconv_mime_decode_headers:
                params:
                    headers: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            iconv:
                params:
                    from_encoding: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    to_encoding: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            iconv_set_encoding:
                params:
                    type: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            iconv_get_encoding:
                params:
                    type: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string, bool]
                    isNull: false
    json:
        funcs:
            json_encode:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    depth: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            json_decode:
                params:
                    json: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    associative: { types: [bool], isNull: true, isVariadic: false, byReference: false }
                    depth: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            json_last_error:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            json_last_error_msg:
                params: {  }
                return:
                    types: [string]
                    isNull: false
    mbstring:
        funcs:
            mb_language:
                params:
                    language: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_internal_encoding:
                params:
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_http_input:
                params:
                    type: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array, string, bool]
                    isNull: false
            mb_http_output:
                params:
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_detect_order:
                params:
                    encoding: { types: [array, string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            mb_substitute_character:
                params:
                    substitute_character: { types: [string, int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, int, bool]
                    isNull: false
            mb_preferred_mime_name:
                params:
                    encoding: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_parse_str:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    result: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            mb_output_handler:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    status: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_str_split:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            mb_strlen:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            mb_strpos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            mb_strrpos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            mb_stripos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            mb_strripos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            mb_strstr:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    before_needle: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_strrchr:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    before_needle: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_stristr:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    before_needle: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_strrichr:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    before_needle: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_substr_count:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            mb_substr:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    start: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_strcut:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    start: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_strwidth:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            mb_strimwidth:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    start: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    width: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    trim_marker: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_convert_encoding:
                params:
                    string: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    to_encoding: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    from_encoding: { types: [array, string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array, string, bool]
                    isNull: false
            mb_convert_case:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_strtoupper:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_strtolower:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_detect_encoding:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encodings: { types: [array, string], isNull: true, isVariadic: false, byReference: false }
                    strict: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_list_encodings:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            mb_encoding_aliases:
                params:
                    encoding: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            mb_encode_mimeheader:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    charset: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    transfer_encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    newline: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    indent: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_decode_mimeheader:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_convert_kana:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_convert_variables:
                params:
                    to_encoding: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    from_encoding: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    var: { isVariadic: false, byReference: true }
                    vars: { isVariadic: true, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_encode_numericentity:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    map: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    hex: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_decode_numericentity:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    map: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_send_mail:
                params:
                    to: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_headers: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    additional_params: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            mb_get_info:
                params:
                    type: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string, int, bool]
                    isNull: false
            mb_check_encoding:
                params:
                    value: { types: [array, string], isNull: true, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            mb_scrub:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mb_ord:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            mb_chr:
                params:
                    codepoint: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_regex_encoding:
                params:
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            mb_ereg:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    matches: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            mb_eregi:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    matches: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            mb_ereg_replace:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    replacement: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: true
            mb_eregi_replace:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    replacement: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: true
            mb_ereg_replace_callback:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: true
            mb_split:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            mb_ereg_match:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            mb_ereg_search:
                params:
                    pattern: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            mb_ereg_search_pos:
                params:
                    pattern: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            mb_ereg_search_regs:
                params:
                    pattern: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            mb_ereg_search_init:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    pattern: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            mb_ereg_search_getregs:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
            mb_ereg_search_getpos:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            mb_ereg_search_setpos:
                params:
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            mb_regex_set_options:
                params:
                    options: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
    SPL:
        funcs:
            class_implements:
                params:
                    object_or_class: { isVariadic: false, byReference: false }
                    autoload: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            class_parents:
                params:
                    object_or_class: { isVariadic: false, byReference: false }
                    autoload: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            class_uses:
                params:
                    object_or_class: { isVariadic: false, byReference: false }
                    autoload: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            spl_autoload:
                params:
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    file_extensions: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            spl_autoload_call:
                params:
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            spl_autoload_extensions:
                params:
                    file_extensions: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            spl_autoload_functions:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            spl_autoload_register:
                params:
                    callback: { types: [callable], isNull: true, isVariadic: false, byReference: false }
                    throw: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    prepend: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            spl_autoload_unregister:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            spl_classes:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            spl_object_hash:
                params:
                    object: { types: [object], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            spl_object_id:
                params:
                    object: { types: [object], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            iterator_apply:
                params:
                    iterator: { types: [Traversable], isNull: false, isVariadic: false, byReference: false }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    args: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            iterator_count:
                params:
                    iterator: { types: [Traversable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            iterator_to_array:
                params:
                    iterator: { types: [Traversable], isNull: false, isVariadic: false, byReference: false }
                    preserve_keys: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
    PDO:
        funcs:
            pdo_drivers:
                params: {  }
                return:
                    types: [array]
                    isNull: false
    session:
        funcs:
            session_name:
                params:
                    name: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            session_module_name:
                params:
                    module: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            session_save_path:
                params:
                    path: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            session_id:
                params:
                    id: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            session_create_id:
                params:
                    prefix: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            session_regenerate_id:
                params:
                    delete_old_session: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            session_decode:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            session_encode:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            session_destroy:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            session_unset:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            session_gc:
                params: {  }
                return:
                    types: [int, bool]
                    isNull: false
            session_get_cookie_params:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            session_write_close:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            session_abort:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            session_reset:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            session_status:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            session_register_shutdown:
                params: {  }
                return:
                    types: [void]
                    isNull: false
            session_commit:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            session_set_save_handler:
                params:
                    open: { isVariadic: false, byReference: false }
                    close: { isVariadic: false, byReference: false }
                    read: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    write: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    destroy: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    gc: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    create_sid: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    validate_sid: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    update_timestamp: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            session_cache_limiter:
                params:
                    value: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            session_cache_expire:
                params:
                    value: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            session_set_cookie_params:
                params:
                    lifetime_or_options: { types: [array, int], isNull: false, isVariadic: false, byReference: false }
                    path: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    domain: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    secure: { types: [bool], isNull: true, isVariadic: false, byReference: false }
                    httponly: { types: [bool], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            session_start:
                params:
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
    posix:
        funcs:
            posix_kill:
                params:
                    process_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    signal: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_getpid:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_getppid:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_getuid:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_setuid:
                params:
                    user_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_geteuid:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_seteuid:
                params:
                    user_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_getgid:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_setgid:
                params:
                    group_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_getegid:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_setegid:
                params:
                    group_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_getgroups:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
            posix_getlogin:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            posix_getpgrp:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_setsid:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_setpgid:
                params:
                    process_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    process_group_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_getpgid:
                params:
                    process_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            posix_getsid:
                params:
                    process_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            posix_uname:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
            posix_times:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
            posix_ctermid:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            posix_ttyname:
                params:
                    file_descriptor: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            posix_isatty:
                params:
                    file_descriptor: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_getcwd:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            posix_mkfifo:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    permissions: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_mknod:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    major: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    minor: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_access:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_getgrnam:
                params:
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            posix_getgrgid:
                params:
                    group_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            posix_getpwnam:
                params:
                    username: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            posix_getpwuid:
                params:
                    user_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            posix_getrlimit:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
            posix_setrlimit:
                params:
                    resource: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    soft_limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    hard_limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            posix_get_last_error:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_errno:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            posix_strerror:
                params:
                    error_code: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            posix_initgroups:
                params:
                    username: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    group_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
    readline:
        funcs:
            readline:
                params:
                    prompt: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            readline_info:
                params:
                    var_name: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    value: { isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            readline_add_history:
                params:
                    prompt: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            readline_clear_history:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            readline_list_history:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            readline_read_history:
                params:
                    filename: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            readline_write_history:
                params:
                    filename: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            readline_completion_function:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            readline_callback_handler_install:
                params:
                    prompt: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            readline_callback_read_char:
                params: {  }
                return:
                    types: [void]
                    isNull: false
            readline_callback_handler_remove:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            readline_redisplay:
                params: {  }
                return:
                    types: [void]
                    isNull: false
            readline_on_new_line:
                params: {  }
                return:
                    types: [void]
                    isNull: false
    standard:
        funcs:
            set_time_limit:
                params:
                    seconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            header_register_callback:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ob_start:
                params:
                    callback: { isVariadic: false, byReference: false }
                    chunk_size: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ob_flush:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            ob_clean:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            ob_end_flush:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            ob_end_clean:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            ob_get_flush:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            ob_get_clean:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            ob_get_contents:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            ob_get_level:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            ob_get_length:
                params: {  }
                return:
                    types: [int, bool]
                    isNull: false
            ob_list_handlers:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            ob_get_status:
                params:
                    full_status: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            ob_implicit_flush:
                params:
                    enable: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            output_reset_rewrite_vars:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            output_add_rewrite_var:
                params:
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_wrapper_register:
                params:
                    protocol: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_register_wrapper:
                params:
                    protocol: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_wrapper_unregister:
                params:
                    protocol: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_wrapper_restore:
                params:
                    protocol: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            array_push:
                params:
                    array: { isVariadic: false, byReference: true }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [int]
                    isNull: false
            krsort:
                params:
                    array: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            ksort:
                params:
                    array: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            count:
                params:
                    value: { types: [Countable, array], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            sizeof:
                params:
                    value: { types: [Countable, array], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            natsort:
                params:
                    array: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            natcasesort:
                params:
                    array: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            asort:
                params:
                    array: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            arsort:
                params:
                    array: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            sort:
                params:
                    array: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            rsort:
                params:
                    array: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            usort:
                params:
                    array: { isVariadic: false, byReference: true }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            uasort:
                params:
                    array: { isVariadic: false, byReference: true }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            uksort:
                params:
                    array: { isVariadic: false, byReference: true }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            end:
                params:
                    array: { isVariadic: false, byReference: true }
                return:
                    types: [mixed]
                    isNull: true
            prev:
                params:
                    array: { isVariadic: false, byReference: true }
                return:
                    types: [mixed]
                    isNull: true
            next:
                params:
                    array: { isVariadic: false, byReference: true }
                return:
                    types: [mixed]
                    isNull: true
            reset:
                params:
                    array: { isVariadic: false, byReference: true }
                return:
                    types: [mixed]
                    isNull: true
            current:
                params:
                    array: { types: [object, array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            pos:
                params:
                    array: { types: [object, array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            key:
                params:
                    array: { types: [object, array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, int]
                    isNull: true
            min:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            max:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            array_walk:
                params:
                    array: { isVariadic: false, byReference: true }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    arg: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            array_walk_recursive:
                params:
                    array: { isVariadic: false, byReference: true }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    arg: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            in_array:
                params:
                    needle: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    haystack: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    strict: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            array_search:
                params:
                    needle: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    haystack: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    strict: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, int, bool]
                    isNull: false
            extract:
                params:
                    array: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    prefix: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            compact:
                params:
                    var_name: { isVariadic: false, byReference: false }
                    var_names: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_fill:
                params:
                    start_index: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    count: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_fill_keys:
                params:
                    keys: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            range:
                params:
                    start: { isVariadic: false, byReference: false }
                    end: { isVariadic: false, byReference: false }
                    step: { types: [int, float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            shuffle:
                params:
                    array: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            array_pop:
                params:
                    array: { isVariadic: false, byReference: true }
                return:
                    types: [mixed]
                    isNull: true
            array_shift:
                params:
                    array: { isVariadic: false, byReference: true }
                return:
                    types: [mixed]
                    isNull: true
            array_unshift:
                params:
                    array: { isVariadic: false, byReference: true }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [int]
                    isNull: false
            array_splice:
                params:
                    array: { isVariadic: false, byReference: true }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    replacement: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_slice:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    preserve_keys: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_merge:
                params:
                    arrays: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_merge_recursive:
                params:
                    arrays: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_replace:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    replacements: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_replace_recursive:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    replacements: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_keys:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    filter_value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    strict: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_key_first:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, int]
                    isNull: true
            array_key_last:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, int]
                    isNull: true
            array_values:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_count_values:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_column:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    column_key: { types: [string, int], isNull: true, isVariadic: false, byReference: false }
                    index_key: { types: [string, int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_reverse:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    preserve_keys: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_pad:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_flip:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_change_key_case:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    case: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_unique:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_intersect_key:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    arrays: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_intersect_ukey:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_intersect:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    arrays: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_uintersect:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_intersect_assoc:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    arrays: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_uintersect_assoc:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_intersect_uassoc:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_uintersect_uassoc:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_diff_key:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    arrays: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_diff_ukey:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_diff:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    arrays: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_udiff:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_diff_assoc:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    arrays: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_diff_uassoc:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_udiff_assoc:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_udiff_uassoc:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_multisort:
                params:
                    array: { isVariadic: false, byReference: true }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            array_rand:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    num: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string, int]
                    isNull: false
            array_sum:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, float]
                    isNull: false
            array_product:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, float]
                    isNull: false
            array_reduce:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    initial: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            array_filter:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    callback: { types: [callable], isNull: true, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_map:
                params:
                    callback: { types: [callable], isNull: true, isVariadic: false, byReference: false }
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    arrays: { isVariadic: true, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_key_exists:
                params:
                    key: { isVariadic: false, byReference: false }
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            key_exists:
                params:
                    key: { isVariadic: false, byReference: false }
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            array_chunk:
                params:
                    array: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    preserve_keys: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            array_combine:
                params:
                    keys: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    values: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            base64_encode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            base64_decode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    strict: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            constant:
                params:
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            ip2long:
                params:
                    ip: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            long2ip:
                params:
                    ip: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            getenv:
                params:
                    name: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    local_only: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string, bool]
                    isNull: false
            putenv:
                params:
                    assignment: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            getopt:
                params:
                    short_options: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    long_options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    rest_index: { isVariadic: false, byReference: true }
                return:
                    types: [array, bool]
                    isNull: false
            flush:
                params: {  }
                return:
                    types: [void]
                    isNull: false
            sleep:
                params:
                    seconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            usleep:
                params:
                    microseconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            time_nanosleep:
                params:
                    seconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    nanoseconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            time_sleep_until:
                params:
                    timestamp: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            get_current_user:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            get_cfg_var:
                params:
                    option: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string, bool]
                    isNull: false
            error_log:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    message_type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    destination: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    additional_headers: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            error_get_last:
                params: {  }
                return:
                    types: [array]
                    isNull: true
            error_clear_last:
                params: {  }
                return:
                    types: [void]
                    isNull: false
            call_user_func:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    args: { isVariadic: true, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            call_user_func_array:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    args: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            forward_static_call:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    args: { isVariadic: true, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            forward_static_call_array:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    args: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            register_shutdown_function:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    args: { isVariadic: true, byReference: false }
                return:
                    types: [bool]
                    isNull: true
            highlight_file:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    return: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            show_source:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    return: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            php_strip_whitespace:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            highlight_string:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    return: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            ini_get:
                params:
                    option: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            ini_get_all:
                params:
                    extension: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    details: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            ini_set:
                params:
                    option: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            ini_alter:
                params:
                    option: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            ini_restore:
                params:
                    option: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            set_include_path:
                params:
                    include_path: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            get_include_path:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            print_r:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    return: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            connection_aborted:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            connection_status:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            ignore_user_abort:
                params:
                    enable: { types: [bool], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            getservbyname:
                params:
                    service: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    protocol: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            getservbyport:
                params:
                    port: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    protocol: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            getprotobyname:
                params:
                    protocol: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            getprotobynumber:
                params:
                    protocol: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            register_tick_function:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                    args: { isVariadic: true, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            unregister_tick_function:
                params:
                    callback: { types: [callable], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            is_uploaded_file:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            move_uploaded_file:
                params:
                    from: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    to: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            parse_ini_file:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    process_sections: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    scanner_mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            parse_ini_string:
                params:
                    ini_string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    process_sections: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    scanner_mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            sys_getloadavg:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
            get_browser:
                params:
                    user_agent: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    return_array: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [object, array, bool]
                    isNull: false
            crc32:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            crypt:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    salt: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            strptime:
                params:
                    timestamp: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            gethostname:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            gethostbyaddr:
                params:
                    ip: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            gethostbyname:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            gethostbynamel:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            dns_check_record:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    type: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            checkdnsrr:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    type: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            dns_get_record:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    authoritative_name_servers: { isVariadic: false, byReference: true }
                    additional_records: { isVariadic: false, byReference: true }
                    raw: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            dns_get_mx:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    hosts: { isVariadic: false, byReference: true }
                    weights: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            getmxrr:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    hosts: { isVariadic: false, byReference: true }
                    weights: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            net_get_interfaces:
                params: {  }
                return:
                    types: [array, bool]
                    isNull: false
            ftok:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    project_id: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            hrtime:
                params:
                    as_number: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, int, float, bool]
                    isNull: false
            lcg_value:
                params: {  }
                return:
                    types: [float]
                    isNull: false
            md5:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            md5_file:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            getmyuid:
                params: {  }
                return:
                    types: [int, bool]
                    isNull: false
            getmygid:
                params: {  }
                return:
                    types: [int, bool]
                    isNull: false
            getmypid:
                params: {  }
                return:
                    types: [int, bool]
                    isNull: false
            getmyinode:
                params: {  }
                return:
                    types: [int, bool]
                    isNull: false
            getlastmod:
                params: {  }
                return:
                    types: [int, bool]
                    isNull: false
            sha1:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sha1_file:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    binary: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            openlog:
                params:
                    prefix: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    facility: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            closelog:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            syslog:
                params:
                    priority: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            inet_ntop:
                params:
                    ip: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            inet_pton:
                params:
                    ip: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            metaphone:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    max_phonemes: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            header:
                params:
                    header: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    replace: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    response_code: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            header_remove:
                params:
                    name: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            setrawcookie:
                params:
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    expires_or_options: { types: [array, int], isNull: false, isVariadic: false, byReference: false }
                    path: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    domain: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    secure: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    httponly: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            setcookie:
                params:
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    expires_or_options: { types: [array, int], isNull: false, isVariadic: false, byReference: false }
                    path: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    domain: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    secure: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    httponly: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            http_response_code:
                params:
                    response_code: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            headers_sent:
                params:
                    filename: { isVariadic: false, byReference: true }
                    line: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            headers_list:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            htmlspecialchars:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    double_encode: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            htmlspecialchars_decode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            html_entity_decode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            htmlentities:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    double_encode: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            get_html_translation_table:
                params:
                    table: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            assert:
                params:
                    assertion: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    description: { types: [Throwable, string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            assert_options:
                params:
                    option: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            bin2hex:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            hex2bin:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            strspn:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    characters: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            strcspn:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    characters: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            nl_langinfo:
                params:
                    item: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            strcoll:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            trim:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    characters: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            rtrim:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    characters: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            chop:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    characters: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            ltrim:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    characters: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            wordwrap:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    width: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    break: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    cut_long_words: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            explode:
                params:
                    separator: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    limit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            implode:
                params:
                    separator: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    array: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            join:
                params:
                    separator: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    array: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            strtok:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    token: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            strtoupper:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            strtolower:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            basename:
                params:
                    path: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    suffix: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            dirname:
                params:
                    path: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    levels: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            pathinfo:
                params:
                    path: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string]
                    isNull: false
            stristr:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    before_needle: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            strstr:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    before_needle: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            strchr:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    before_needle: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            strpos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            stripos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            strrpos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            strripos:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            strrchr:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            str_contains:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            str_starts_with:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            str_ends_with:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            chunk_split:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    separator: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            substr:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            substr_replace:
                params:
                    string: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    replace: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [array, int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [array, int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array, string]
                    isNull: false
            quotemeta:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            ord:
                params:
                    character: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            chr:
                params:
                    codepoint: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            ucfirst:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            lcfirst:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            ucwords:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    separators: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            strtr:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    from: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    to: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            strrev:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            similar_text:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    percent: { isVariadic: false, byReference: true }
                return:
                    types: [int]
                    isNull: false
            addcslashes:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    characters: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            addslashes:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            stripcslashes:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            stripslashes:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            str_replace:
                params:
                    search: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    replace: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    count: { isVariadic: false, byReference: true }
                return:
                    types: [array, string]
                    isNull: false
            str_ireplace:
                params:
                    search: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    replace: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    count: { isVariadic: false, byReference: true }
                return:
                    types: [array, string]
                    isNull: false
            hebrev:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    max_chars_per_line: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            nl2br:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    use_xhtml: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            strip_tags:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    allowed_tags: { types: [array, string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            setlocale:
                params:
                    category: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    locales: { isVariadic: false, byReference: false }
                    rest: { isVariadic: true, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            parse_str:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    result: { isVariadic: false, byReference: true }
                return:
                    types: [void]
                    isNull: false
            str_getcsv:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    separator: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    enclosure: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    escape: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            str_repeat:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    times: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            count_chars:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string]
                    isNull: false
            strnatcmp:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            localeconv:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            strnatcasecmp:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            substr_count:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            str_pad:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    pad_string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    pad_type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sscanf:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    vars: { isVariadic: true, byReference: false }
                return:
                    types: [array, int]
                    isNull: true
            str_rot13:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            str_shuffle:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            str_word_count:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    format: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    characters: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [array, int]
                    isNull: false
            str_split:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            strpbrk:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    characters: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            substr_compare:
                params:
                    haystack: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    needle: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    case_insensitive: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            utf8_encode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            utf8_decode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            opendir:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            dir:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [Directory, bool]
                    isNull: false
            closedir:
                params:
                    dir_handle: { isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            chdir:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            chroot:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            getcwd:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            rewinddir:
                params:
                    dir_handle: { isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            readdir:
                params:
                    dir_handle: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            scandir:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    sorting_order: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            glob:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            exec:
                params:
                    command: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    output: { isVariadic: false, byReference: true }
                    result_code: { isVariadic: false, byReference: true }
                return:
                    types: [string, bool]
                    isNull: false
            system:
                params:
                    command: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    result_code: { isVariadic: false, byReference: true }
                return:
                    types: [string, bool]
                    isNull: false
            passthru:
                params:
                    command: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    result_code: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: true
            escapeshellcmd:
                params:
                    command: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            escapeshellarg:
                params:
                    arg: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            shell_exec:
                params:
                    command: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: true
            proc_nice:
                params:
                    priority: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            flock:
                params:
                    stream: { isVariadic: false, byReference: false }
                    operation: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    would_block: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            get_meta_tags:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    use_include_path: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            pclose:
                params:
                    handle: { isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            popen:
                params:
                    command: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            readfile:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    use_include_path: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            rewind:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            rmdir:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            umask:
                params:
                    mask: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            fclose:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            feof:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            fgetc:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            fgets:
                params:
                    stream: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            fread:
                params:
                    stream: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            fopen:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    use_include_path: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            fscanf:
                params:
                    stream: { isVariadic: false, byReference: false }
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    vars: { isVariadic: true, byReference: false }
                return:
                    types: [array, int, bool]
                    isNull: true
            fpassthru:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            ftruncate:
                params:
                    stream: { isVariadic: false, byReference: false }
                    size: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            fstat:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            fseek:
                params:
                    stream: { isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    whence: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            ftell:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            fflush:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            fwrite:
                params:
                    stream: { isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            fputs:
                params:
                    stream: { isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            mkdir:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    permissions: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    recursive: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            rename:
                params:
                    from: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    to: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            copy:
                params:
                    from: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    to: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            tempnam:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    prefix: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            tmpfile:
                params: {  }
                return:
                    types: [resource, bool]
                    isNull: false
            file:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            file_get_contents:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    use_include_path: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            unlink:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            file_put_contents:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            fputcsv:
                params:
                    stream: { isVariadic: false, byReference: false }
                    fields: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    separator: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    enclosure: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    escape: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            fgetcsv:
                params:
                    stream: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    separator: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    enclosure: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    escape: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            realpath:
                params:
                    path: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            fnmatch:
                params:
                    pattern: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            sys_get_temp_dir:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            fileatime:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            filectime:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            filegroup:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            fileinode:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            filemtime:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            fileowner:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            fileperms:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            filesize:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            filetype:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            file_exists:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_writable:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_writeable:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_readable:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_executable:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_file:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_dir:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_link:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stat:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            lstat:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            chown:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    user: { types: [string, int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            chgrp:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    group: { types: [string, int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            lchown:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    user: { types: [string, int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            lchgrp:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    group: { types: [string, int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            chmod:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    permissions: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            touch:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mtime: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    atime: { types: [int], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            clearstatcache:
                params:
                    clear_realpath_cache: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            disk_total_space:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float, bool]
                    isNull: false
            disk_free_space:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float, bool]
                    isNull: false
            diskfreespace:
                params:
                    directory: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float, bool]
                    isNull: false
            realpath_cache_get:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            realpath_cache_size:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            sprintf:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [string]
                    isNull: false
            printf:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [int]
                    isNull: false
            vprintf:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    values: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            vsprintf:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    values: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            fprintf:
                params:
                    stream: { isVariadic: false, byReference: false }
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [int]
                    isNull: false
            vfprintf:
                params:
                    stream: { isVariadic: false, byReference: false }
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    values: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            fsockopen:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    port: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    error_code: { isVariadic: false, byReference: true }
                    error_message: { isVariadic: false, byReference: true }
                    timeout: { types: [float], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            pfsockopen:
                params:
                    hostname: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    port: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    error_code: { isVariadic: false, byReference: true }
                    error_message: { isVariadic: false, byReference: true }
                    timeout: { types: [float], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            http_build_query:
                params:
                    data: { types: [object, array], isNull: false, isVariadic: false, byReference: false }
                    numeric_prefix: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    arg_separator: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    encoding_type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            image_type_to_mime_type:
                params:
                    image_type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            image_type_to_extension:
                params:
                    image_type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    include_dot: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            getimagesize:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    image_info: { isVariadic: false, byReference: true }
                return:
                    types: [array, bool]
                    isNull: false
            getimagesizefromstring:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    image_info: { isVariadic: false, byReference: true }
                return:
                    types: [array, bool]
                    isNull: false
            phpinfo:
                params:
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            phpversion:
                params:
                    extension: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            phpcredits:
                params:
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            php_sapi_name:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            php_uname:
                params:
                    mode: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            php_ini_scanned_files:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            php_ini_loaded_file:
                params: {  }
                return:
                    types: [string, bool]
                    isNull: false
            iptcembed:
                params:
                    iptc_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    spool: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            iptcparse:
                params:
                    iptc_block: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            levenshtein:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    insertion_cost: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    replacement_cost: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    deletion_cost: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            readlink:
                params:
                    path: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            linkinfo:
                params:
                    path: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            symlink:
                params:
                    target: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    link: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            link:
                params:
                    target: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    link: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            mail:
                params:
                    to: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    subject: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_headers: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    additional_params: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            abs:
                params:
                    num: { types: [int, float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, float]
                    isNull: false
            ceil:
                params:
                    num: { types: [int, float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            floor:
                params:
                    num: { types: [int, float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            round:
                params:
                    num: { types: [int, float], isNull: false, isVariadic: false, byReference: false }
                    precision: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            sin:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            cos:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            tan:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            asin:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            acos:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            atan:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            atanh:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            atan2:
                params:
                    'y': { types: [float], isNull: false, isVariadic: false, byReference: false }
                    x: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            sinh:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            cosh:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            tanh:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            asinh:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            acosh:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            expm1:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            log1p:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            pi:
                params: {  }
                return:
                    types: [float]
                    isNull: false
            is_finite:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_nan:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            intdiv:
                params:
                    num1: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    num2: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            is_infinite:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            pow:
                params:
                    num: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    exponent: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [object, int, float]
                    isNull: false
            exp:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            log:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                    base: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            log10:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            sqrt:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            hypot:
                params:
                    x: { types: [float], isNull: false, isVariadic: false, byReference: false }
                    'y': { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            deg2rad:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            rad2deg:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            bindec:
                params:
                    binary_string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, float]
                    isNull: false
            hexdec:
                params:
                    hex_string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, float]
                    isNull: false
            octdec:
                params:
                    octal_string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, float]
                    isNull: false
            decbin:
                params:
                    num: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            decoct:
                params:
                    num: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            dechex:
                params:
                    num: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            base_convert:
                params:
                    num: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    from_base: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    to_base: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            number_format:
                params:
                    num: { types: [float], isNull: false, isVariadic: false, byReference: false }
                    decimals: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    decimal_separator: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    thousands_separator: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            fmod:
                params:
                    num1: { types: [float], isNull: false, isVariadic: false, byReference: false }
                    num2: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            fdiv:
                params:
                    num1: { types: [float], isNull: false, isVariadic: false, byReference: false }
                    num2: { types: [float], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            microtime:
                params:
                    as_float: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, float]
                    isNull: false
            gettimeofday:
                params:
                    as_float: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, float]
                    isNull: false
            getrusage:
                params:
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            pack:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [string]
                    isNull: false
            unpack:
                params:
                    format: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            password_get_info:
                params:
                    hash: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            password_hash:
                params:
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    algo: { types: [string, int], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            password_needs_rehash:
                params:
                    hash: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    algo: { types: [string, int], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            password_verify:
                params:
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    hash: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            password_algos:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            proc_open:
                params:
                    command: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    descriptor_spec: { types: [array], isNull: false, isVariadic: false, byReference: false }
                    pipes: { isVariadic: false, byReference: true }
                    cwd: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    env_vars: { types: [array], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            proc_close:
                params:
                    process: { isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            proc_terminate:
                params:
                    process: { isVariadic: false, byReference: false }
                    signal: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            proc_get_status:
                params:
                    process: { isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            quoted_printable_decode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            quoted_printable_encode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            mt_srand:
                params:
                    seed: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            srand:
                params:
                    seed: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            rand:
                params:
                    min: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    max: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            mt_rand:
                params:
                    min: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    max: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            mt_getrandmax:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            getrandmax:
                params: {  }
                return:
                    types: [int]
                    isNull: false
            random_bytes:
                params:
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            random_int:
                params:
                    min: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    max: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            soundex:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            stream_select:
                params:
                    read: { isVariadic: false, byReference: true }
                    write: { isVariadic: false, byReference: true }
                    except: { isVariadic: false, byReference: true }
                    seconds: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    microseconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            stream_context_create:
                params:
                    options: { types: [array], isNull: true, isVariadic: false, byReference: false }
                    params: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            stream_context_set_params:
                params:
                    context: { isVariadic: false, byReference: false }
                    params: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_context_get_params:
                params:
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            stream_context_set_option:
                params:
                    context: { isVariadic: false, byReference: false }
                    wrapper_or_options: { types: [array, string], isNull: false, isVariadic: false, byReference: false }
                    option_name: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_context_get_options:
                params:
                    stream_or_context: { isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            stream_context_get_default:
                params:
                    options: { types: [array], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            stream_context_set_default:
                params:
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            stream_filter_prepend:
                params:
                    stream: { isVariadic: false, byReference: false }
                    filter_name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    params: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            stream_filter_append:
                params:
                    stream: { isVariadic: false, byReference: false }
                    filter_name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    params: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            stream_filter_remove:
                params:
                    stream_filter: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_socket_client:
                params:
                    address: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    error_code: { isVariadic: false, byReference: true }
                    error_message: { isVariadic: false, byReference: true }
                    timeout: { types: [float], isNull: true, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            stream_socket_server:
                params:
                    address: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    error_code: { isVariadic: false, byReference: true }
                    error_message: { isVariadic: false, byReference: true }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            stream_socket_accept:
                params:
                    socket: { isVariadic: false, byReference: false }
                    timeout: { types: [float], isNull: true, isVariadic: false, byReference: false }
                    peer_name: { isVariadic: false, byReference: true }
                return:
                    types: [resource, bool]
                    isNull: false
            stream_socket_get_name:
                params:
                    socket: { isVariadic: false, byReference: false }
                    remote: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            stream_socket_recvfrom:
                params:
                    socket: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    address: { isVariadic: false, byReference: true }
                return:
                    types: [string, bool]
                    isNull: false
            stream_socket_sendto:
                params:
                    socket: { isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    address: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            stream_socket_enable_crypto:
                params:
                    stream: { isVariadic: false, byReference: false }
                    enable: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    crypto_method: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    session_stream: { isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            stream_socket_shutdown:
                params:
                    stream: { isVariadic: false, byReference: false }
                    mode: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_socket_pair:
                params:
                    domain: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    type: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    protocol: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            stream_copy_to_stream:
                params:
                    from: { isVariadic: false, byReference: false }
                    to: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            stream_get_contents:
                params:
                    stream: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: true, isVariadic: false, byReference: false }
                    offset: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            stream_supports_lock:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_set_write_buffer:
                params:
                    stream: { isVariadic: false, byReference: false }
                    size: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            set_file_buffer:
                params:
                    stream: { isVariadic: false, byReference: false }
                    size: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            stream_set_read_buffer:
                params:
                    stream: { isVariadic: false, byReference: false }
                    size: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            stream_set_blocking:
                params:
                    stream: { isVariadic: false, byReference: false }
                    enable: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            socket_set_blocking:
                params:
                    stream: { isVariadic: false, byReference: false }
                    enable: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_get_meta_data:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            socket_get_status:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            stream_get_line:
                params:
                    stream: { isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    ending: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            stream_resolve_include_path:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            stream_get_wrappers:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            stream_get_transports:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            stream_is_local:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_isatty:
                params:
                    stream: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            stream_set_chunk_size:
                params:
                    stream: { isVariadic: false, byReference: false }
                    size: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            stream_set_timeout:
                params:
                    stream: { isVariadic: false, byReference: false }
                    seconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    microseconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            socket_set_timeout:
                params:
                    stream: { isVariadic: false, byReference: false }
                    seconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    microseconds: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            gettype:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            get_debug_type:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            settype:
                params:
                    var: { isVariadic: false, byReference: true }
                    type: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            intval:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    base: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            floatval:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            doubleval:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [float]
                    isNull: false
            boolval:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            strval:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            is_null:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_resource:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_bool:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_int:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_integer:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_long:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_float:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_double:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_numeric:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_string:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_array:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_object:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_scalar:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_callable:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    syntax_only: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    callable_name: { isVariadic: false, byReference: true }
                return:
                    types: [bool]
                    isNull: false
            is_iterable:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            is_countable:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            uniqid:
                params:
                    prefix: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    more_entropy: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            parse_url:
                params:
                    url: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    component: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, string, int]
                    isNull: true
            urlencode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            urldecode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            rawurlencode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            rawurldecode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            get_headers:
                params:
                    url: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    associative: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    context: { isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            stream_bucket_make_writeable:
                params:
                    brigade: { isVariadic: false, byReference: false }
                return:
                    types: [object]
                    isNull: true
            stream_bucket_prepend:
                params:
                    brigade: { isVariadic: false, byReference: false }
                    bucket: { types: [object], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            stream_bucket_append:
                params:
                    brigade: { isVariadic: false, byReference: false }
                    bucket: { types: [object], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            stream_bucket_new:
                params:
                    stream: { isVariadic: false, byReference: false }
                    buffer: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [object]
                    isNull: false
            stream_get_filters:
                params: {  }
                return:
                    types: [array]
                    isNull: false
            stream_filter_register:
                params:
                    filter_name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    class: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            convert_uuencode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            convert_uudecode:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            var_dump:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [void]
                    isNull: false
            var_export:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    return: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: true
            debug_zval_dump:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                    values: { isVariadic: true, byReference: false }
                return:
                    types: [void]
                    isNull: false
            serialize:
                params:
                    value: { types: [mixed], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            unserialize:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    options: { types: [array], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [mixed]
                    isNull: true
            memory_get_usage:
                params:
                    real_usage: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            memory_get_peak_usage:
                params:
                    real_usage: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            version_compare:
                params:
                    version1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    version2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    operator: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            dl:
                params:
                    extension_filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            cli_set_process_title:
                params:
                    title: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            cli_get_process_title:
                params: {  }
                return:
                    types: [string]
                    isNull: true
    SimpleXML:
        funcs:
            simplexml_load_file:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    class_name: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    namespace_or_prefix: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    is_prefix: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [SimpleXMLElement, bool]
                    isNull: false
            simplexml_load_string:
                params:
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    class_name: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    options: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    namespace_or_prefix: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    is_prefix: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [SimpleXMLElement, bool]
                    isNull: false
            simplexml_import_dom:
                params:
                    node: { types: [SimpleXMLElement, DOMNode], isNull: false, isVariadic: false, byReference: false }
                    class_name: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [SimpleXMLElement]
                    isNull: true
    tokenizer:
        funcs:
            token_get_all:
                params:
                    code: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    flags: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            token_name:
                params:
                    id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
    xml:
        funcs:
            xml_parser_create:
                params:
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [XMLParser]
                    isNull: false
            xml_parser_create_ns:
                params:
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    separator: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [XMLParser]
                    isNull: false
            xml_set_object:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    object: { types: [object], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_set_element_handler:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    start_handler: { isVariadic: false, byReference: false }
                    end_handler: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_set_character_data_handler:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    handler: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_set_processing_instruction_handler:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    handler: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_set_default_handler:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    handler: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_set_unparsed_entity_decl_handler:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    handler: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_set_notation_decl_handler:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    handler: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_set_external_entity_ref_handler:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    handler: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_set_start_namespace_decl_handler:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    handler: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_set_end_namespace_decl_handler:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    handler: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_parse:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    is_final: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            xml_parse_into_struct:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    values: { isVariadic: false, byReference: true }
                    index: { isVariadic: false, byReference: true }
                return:
                    types: [int]
                    isNull: false
            xml_get_error_code:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            xml_error_string:
                params:
                    error_code: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: true
            xml_get_current_line_number:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            xml_get_current_column_number:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            xml_get_current_byte_index:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            xml_parser_free:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_parser_set_option:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    option: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    value: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xml_parser_get_option:
                params:
                    parser: { types: [XMLParser], isNull: false, isVariadic: false, byReference: false }
                    option: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, int]
                    isNull: false
    xmlwriter:
        funcs:
            xmlwriter_open_uri:
                params:
                    uri: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [XMLWriter, bool]
                    isNull: false
            xmlwriter_open_memory:
                params: {  }
                return:
                    types: [XMLWriter, bool]
                    isNull: false
            xmlwriter_set_indent:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    enable: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_set_indent_string:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    indentation: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_comment:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_comment:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_attribute:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_attribute:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_attribute:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    value: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_attribute_ns:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    prefix: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    namespace: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_attribute_ns:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    prefix: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    namespace: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    value: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_element:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_element:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_full_end_element:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_element_ns:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    prefix: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    namespace: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_element:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_element_ns:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    prefix: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    namespace: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_pi:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    target: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_pi:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_pi:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    target: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_cdata:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_cdata:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_cdata:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_text:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_raw:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_document:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    version: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    encoding: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    standalone: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_document:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_comment:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_dtd:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    qualifiedName: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    publicId: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    systemId: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_dtd:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_dtd:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    publicId: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    systemId: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_dtd_element:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    qualifiedName: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_dtd_element:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_dtd_element:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_dtd_attlist:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_dtd_attlist:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_dtd_attlist:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_start_dtd_entity:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    isParam: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_end_dtd_entity:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_write_dtd_entity:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    name: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    content: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    isParam: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                    publicId: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    systemId: { types: [string], isNull: true, isVariadic: false, byReference: false }
                    notationData: { types: [string], isNull: true, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            xmlwriter_output_memory:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    flush: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            xmlwriter_flush:
                params:
                    writer: { types: [XMLWriter], isNull: false, isVariadic: false, byReference: false }
                    empty: { types: [bool], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, int]
                    isNull: false
    sodium:
        funcs:
            sodium_crypto_aead_aes256gcm_is_available:
                params: {  }
                return:
                    types: [bool]
                    isNull: false
            sodium_crypto_aead_aes256gcm_decrypt:
                params:
                    ciphertext: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            sodium_crypto_aead_aes256gcm_encrypt:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_aead_aes256gcm_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_aead_chacha20poly1305_decrypt:
                params:
                    ciphertext: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            sodium_crypto_aead_chacha20poly1305_encrypt:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_aead_chacha20poly1305_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_aead_chacha20poly1305_ietf_decrypt:
                params:
                    ciphertext: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            sodium_crypto_aead_chacha20poly1305_ietf_encrypt:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_aead_chacha20poly1305_ietf_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_aead_xchacha20poly1305_ietf_decrypt:
                params:
                    ciphertext: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            sodium_crypto_aead_xchacha20poly1305_ietf_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_aead_xchacha20poly1305_ietf_encrypt:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_auth:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_auth_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_auth_verify:
                params:
                    mac: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            sodium_crypto_box:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_box_keypair:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_box_seed_keypair:
                params:
                    seed: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_box_keypair_from_secretkey_and_publickey:
                params:
                    secret_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    public_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_box_open:
                params:
                    ciphertext: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            sodium_crypto_box_publickey:
                params:
                    key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_box_publickey_from_secretkey:
                params:
                    secret_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_box_seal:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    public_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_box_seal_open:
                params:
                    ciphertext: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            sodium_crypto_box_secretkey:
                params:
                    key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_kx_keypair:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_kx_publickey:
                params:
                    key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_kx_secretkey:
                params:
                    key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_kx_seed_keypair:
                params:
                    seed: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_kx_client_session_keys:
                params:
                    client_key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    server_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            sodium_crypto_kx_server_session_keys:
                params:
                    server_key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    client_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            sodium_crypto_generichash:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_generichash_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_generichash_init:
                params:
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_generichash_update:
                params:
                    state: { isVariadic: false, byReference: true }
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            sodium_crypto_generichash_final:
                params:
                    state: { isVariadic: false, byReference: true }
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_kdf_derive_from_key:
                params:
                    subkey_length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    subkey_id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    context: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_kdf_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_pwhash:
                params:
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    salt: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    opslimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    memlimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    algo: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_pwhash_str:
                params:
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    opslimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    memlimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_pwhash_str_verify:
                params:
                    hash: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            sodium_crypto_pwhash_str_needs_rehash:
                params:
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    opslimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    memlimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            sodium_crypto_pwhash_scryptsalsa208sha256:
                params:
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    salt: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    opslimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    memlimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_pwhash_scryptsalsa208sha256_str:
                params:
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    opslimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    memlimit: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_pwhash_scryptsalsa208sha256_str_verify:
                params:
                    hash: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    password: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            sodium_crypto_scalarmult:
                params:
                    'n': { types: [string], isNull: false, isVariadic: false, byReference: false }
                    p: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_secretbox:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_secretbox_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_secretbox_open:
                params:
                    ciphertext: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            sodium_crypto_secretstream_xchacha20poly1305_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_secretstream_xchacha20poly1305_init_push:
                params:
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array]
                    isNull: false
            sodium_crypto_secretstream_xchacha20poly1305_push:
                params:
                    state: { isVariadic: false, byReference: true }
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    tag: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_secretstream_xchacha20poly1305_init_pull:
                params:
                    header: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_secretstream_xchacha20poly1305_pull:
                params:
                    state: { isVariadic: false, byReference: true }
                    ciphertext: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    additional_data: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [array, bool]
                    isNull: false
            sodium_crypto_secretstream_xchacha20poly1305_rekey:
                params:
                    state: { isVariadic: false, byReference: true }
                return:
                    types: [void]
                    isNull: false
            sodium_crypto_shorthash:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_shorthash_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    secret_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_detached:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    secret_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_ed25519_pk_to_curve25519:
                params:
                    public_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_ed25519_sk_to_curve25519:
                params:
                    secret_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_keypair:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_keypair_from_secretkey_and_publickey:
                params:
                    secret_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    public_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_open:
                params:
                    signed_message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    public_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            sodium_crypto_sign_publickey:
                params:
                    key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_secretkey:
                params:
                    key_pair: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_publickey_from_secretkey:
                params:
                    secret_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_seed_keypair:
                params:
                    seed: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_sign_verify_detached:
                params:
                    signature: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    public_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            sodium_crypto_stream:
                params:
                    length: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_stream_keygen:
                params: {  }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_stream_xor:
                params:
                    message: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    nonce: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_add:
                params:
                    string1: { isVariadic: false, byReference: true }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            sodium_compare:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            sodium_increment:
                params:
                    string: { isVariadic: false, byReference: true }
                return:
                    types: [void]
                    isNull: false
            sodium_memcmp:
                params:
                    string1: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    string2: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [int]
                    isNull: false
            sodium_memzero:
                params:
                    string: { isVariadic: false, byReference: true }
                return:
                    types: [void]
                    isNull: false
            sodium_pad:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    block_size: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_unpad:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    block_size: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_bin2hex:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_hex2bin:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    ignore: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_bin2base64:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_base642bin:
                params:
                    string: { types: [string], isNull: false, isVariadic: false, byReference: false }
                    id: { types: [int], isNull: false, isVariadic: false, byReference: false }
                    ignore: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
            sodium_crypto_scalarmult_base:
                params:
                    secret_key: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string]
                    isNull: false
    zip:
        funcs:
            zip_open:
                params:
                    filename: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            zip_close:
                params:
                    zip: { isVariadic: false, byReference: false }
                return:
                    types: [void]
                    isNull: false
            zip_read:
                params:
                    zip: { isVariadic: false, byReference: false }
                return:
                    types: [resource, bool]
                    isNull: false
            zip_entry_open:
                params:
                    zip_dp: { isVariadic: false, byReference: false }
                    zip_entry: { isVariadic: false, byReference: false }
                    mode: { types: [string], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            zip_entry_close:
                params:
                    zip_entry: { isVariadic: false, byReference: false }
                return:
                    types: [bool]
                    isNull: false
            zip_entry_read:
                params:
                    zip_entry: { isVariadic: false, byReference: false }
                    len: { types: [int], isNull: false, isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            zip_entry_name:
                params:
                    zip_entry: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
            zip_entry_compressedsize:
                params:
                    zip_entry: { isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            zip_entry_filesize:
                params:
                    zip_entry: { isVariadic: false, byReference: false }
                return:
                    types: [int, bool]
                    isNull: false
            zip_entry_compressionmethod:
                params:
                    zip_entry: { isVariadic: false, byReference: false }
                return:
                    types: [string, bool]
                    isNull: false
